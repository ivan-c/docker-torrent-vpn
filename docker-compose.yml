version: '3.4'

services:
  # This service sets up a firewall which only allows traffic to the docker
  # network and the specified destination (ip, port protocol). See its repo for
  # more information: https://github.com/0xcaff/docker-simple-firewall
  firewall:
    build:
      context: https://github.com/0xcaff/docker-simple-firewall.git#pull/1/head

    # Needed by the image to setup the firewall.
    cap_add:
      - net_admin

    # The DNS servers which are used through the VPN.
    dns:
      - 8.8.8.8
      - 8.8.4.4

    environment:
      # default (google) DNS servers; whitelist DNS traffic to them
      DNS_SERVERS: 8.8.8.8 8.8.4.4
      # The only address, port and protocol combination allowed through the
      # firewall. This should be the address, port and protocol of the VPN
      # service.
      ALLOW_IP_ADDRESS:
      ALLOW_PORT:
      ALLOW_PROTO: udp

      # TCP connections will be accepted at this port once the firewall is
      # configured.
      FIREWALL_READY_SIGNAL_PORT: 60000

    # patch entrypoint firewall script: allow DNS requests to DNS_SERVERS
    # run all but last line in script (`nc` invocation); add DNS firewall rules; run `nc`
    entrypoint: /bin/sh
    command: -ec '
      grep -v nc /firewall/setup_firewall.sh | sh -e &&
      for dns_ip_addr in $${DNS_SERVERS}; do
          echo Allowing DNS traffic to "$${dns_ip_addr}"...;
          iptables
            --append OUTPUT
            --destination "$${dns_ip_addr}"
            --protocol udp
            --dport 53
            --jump ACCEPT;
      done &&
      grep nc /firewall/setup_firewall.sh | sh -e
      '

    # The only traffic allowed out of this container is traffic to this network
    # and traffic to the specified ip address.
    networks:
      - local

  # A service which creates an openvpn tunnel. Check out its repo for more
  # information: https://github.com/0xcaff/docker-openvpn-client
  vpn:
    build:
      context: https://github.com/jessfraz/dockerfiles.git#pull/397/head
      dockerfile: openvpn/Dockerfile

    # Needed for OpenVPN to work.
    cap_add:
      - net_admin
    devices:
      - /dev/net/tun

    # Share the network stack of the firewall client container. When this
    # container binds ports, they can be reached through the "firewall" service.
    network_mode: service:firewall

    volumes:
      # This is the wait-for script from https://github.com/Eficode/wait-for. It
      # is used to ensure that the VPN only starts after the firewall is
      # configured. This is done so if the VPN tries to connect to a non-allowed
      # address the failure is fast.
      - ./wait-for/wait-for:/wait-for

      # The VPN configuration file.
      - source: ./config/openvpn
        target: /etc/openvpn-config
        type: bind
        read_only: true

    environment:
      OVPN_FILE: /etc/openvpn-config/config.ovpn
      PASSWORD_FILE: /etc/openvpn-config/credentials.txt

    # Start openvpn after the firewall is done.
    entrypoint: /bin/sh
    command: -ec '
      /wait-for localhost:60000 --
          openvpn
            --config $${OVPN_FILE}
            --auth-user-pass $${PASSWORD_FILE}
            --up /usr/share/openvpn/up.sh
            --down /usr/share/openvpn/down.sh
            --script-security 2
     '


  # A service with the rtorrent torrent client. See the repository for more
  # information: https://github.com/0xcaff/docker-rtorrent
  rtorrent:
    environment:
      PUID: 1000
      PGID: 1000
    build:
      context: https://github.com/looselyrigorous/docker-rtorrent.git#0.2
    depends_on:
      - vpn

    # Share the network stack of the firewall client container. When this
    # container binds ports, they can be reached through the "firewall" service.
    network_mode: service:firewall

    volumes:
      # rTorrent configuration file.
      - "./config/rtorrent:/config"

      # rTorrent persistant state.
      - "rtorrent-sock:/socket"
      - "rtorrent-session:/session"
      - "./download:/download"
      - "./watch:/watch"

      # This is the wait-for script from https://github.com/Eficode/wait-for. It
      # is used to ensure that the rtorrent starts only after the firewall is
      # initialized.
      - ./wait-for/wait-for:/wait-for

    # Waits for the firewall to be set up before running rtorrent. The VPN may
    # or may not be ready but no traffic will be leaked because of the firewall.
    command: sh -ec "/wait-for localhost:60000 -- chown $$PUID:$$PGID /download && /init"

    # exit 0 on first run (`Copying default configuration`) unless auto-restart enabled
    restart: unless-stopped

  # A service containing flood, a web interface for rtorrent.
  flood:
    build:
      # socket must be set as `/data/rtorrent.sock` in UI
      context: https://github.com/jfurrow/flood.git#pull/756/head
    depends_on:
      - rtorrent

    environment:
      # Configuration for flood. Check out this file for all possible
      # configuration options:
      # https://github.com/jfurrow/flood/blob/master/config.docker.js
      #
      # socket must be set as /data/rtorrent.sock in UI
      RTORRENT_SOCK: 'true'
    volumes:
      - "rtorrent-sock:/data"

    # Expose the flood web interface port.
    ports:
      - 3000:3000

    # The firewall destination (vpn, firewall, rtorrent) is only accessible
    # through the local network.
    networks:
      - local

volumes:
  rtorrent-sock: {}
  rtorrent-session: {}

networks:
  # A network for connecting local services.
  local:
